Slip 27 - A) Create a Node.js Application create a directory and the contents of the directory.



const fs = require('fs');
const path = require('path');

const directoryName = 'example';

// Create the directory
fs.mkdirSync(directoryName);

// Create a file and write some content to it
fs.writeFileSync(path.join(directoryName, 'file1.txt'), 'Hello, world!');

// Create another file
fs.writeFileSync(path.join(directoryName, 'file2.txt'), 'This is another file.');

// Read the contents of the directory
const contents = fs.readdirSync(directoryName);

console.log(`The contents of ${directoryName} are:`);
console.log(contents);








Slip 27 - B) Create an Node.js Application that contain the Student Registration details and write a JavaScript to validate DOB, Mobile Number, and email address.



const express = require('express');
const bodyParser = require('body-parser');
const validator = require('validator');

const app = express();

// Set up middleware to parse incoming request bodies
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Define a route for handling student registration
app.post('/register', (req, res) => {
  const { name, dob, mobile, email } = req.body;

  // Validate date of birth
  if (!validator.isISO8601(dob)) {
    return res.status(400).json({ error: 'Invalid date of birth.' });
  }

  // Validate mobile number
  if (!validator.isMobilePhone(mobile)) {
    return res.status(400).json({ error: 'Invalid mobile number.' });
  }

  // Validate email address
  if (!validator.isEmail(email)) {
    return res.status(400).json({ error: 'Invalid email address.' });
  }

  // Save the student registration details to the database or do other processing

  return res.status(200).json({ message: 'Registration successful.' });
});

// Start the server
app.listen(3000, () => {
  console.log('Server started on port 3000');
});

